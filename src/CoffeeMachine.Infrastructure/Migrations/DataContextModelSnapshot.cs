// <auto-generated />
using System;
using CoffeeMachine.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CoffeeMachine.Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.17")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Balance", b =>
                {
                    b.Property<Guid>("BalanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("EarnedMoney")
                        .HasColumnType("integer");

                    b.HasKey("BalanceId");

                    b.HasIndex("CoffeeId");

                    b.ToTable("Balances");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.BanknoteCashbox", b =>
                {
                    b.Property<Guid>("BanknoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("CountBanknote")
                        .HasColumnType("integer");

                    b.Property<int>("Denomination")
                        .HasColumnType("integer");

                    b.HasKey("BanknoteId");

                    b.ToTable("BanknoteCashboxes");

                    b.HasData(
                        new
                        {
                            BanknoteId = new Guid("b25ba405-8a95-4f68-906f-6b565c83feb2"),
                            CountBanknote = 50,
                            Denomination = 50
                        },
                        new
                        {
                            BanknoteId = new Guid("0d83dd1e-e17a-4e98-8322-7bd0115bc298"),
                            CountBanknote = 40,
                            Denomination = 100
                        },
                        new
                        {
                            BanknoteId = new Guid("0e02ee51-af36-4a46-a81f-83704eb16a45"),
                            CountBanknote = 30,
                            Denomination = 200
                        },
                        new
                        {
                            BanknoteId = new Guid("50d91f4e-a198-4019-a45c-d43ff44ea993"),
                            CountBanknote = 20,
                            Denomination = 500
                        },
                        new
                        {
                            BanknoteId = new Guid("70c38472-1346-4661-942f-7f5109ffcf05"),
                            CountBanknote = 15,
                            Denomination = 1000
                        },
                        new
                        {
                            BanknoteId = new Guid("dcf568ce-a3a8-458c-b3c5-c597142a8890"),
                            CountBanknote = 10,
                            Denomination = 2000
                        },
                        new
                        {
                            BanknoteId = new Guid("5bd19c6a-e458-4658-a923-4793b8cb4415"),
                            CountBanknote = 5,
                            Denomination = 5000
                        });
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Coffee", b =>
                {
                    b.Property<Guid>("CoffeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Price")
                        .HasColumnType("integer");

                    b.HasKey("CoffeeId");

                    b.ToTable("Coffees");

                    b.HasData(
                        new
                        {
                            CoffeeId = new Guid("ecc10c72-a8ca-4fed-8e87-c1be4de129f8"),
                            Name = "Капучино",
                            Price = 600
                        },
                        new
                        {
                            CoffeeId = new Guid("f5c88077-8eeb-4a88-adc2-1c474fb411af"),
                            Name = "Латте",
                            Price = 850
                        },
                        new
                        {
                            CoffeeId = new Guid("bfa64581-25f1-4bb3-950a-c463e555e4be"),
                            Name = "Американо",
                            Price = 900
                        });
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Income", b =>
                {
                    b.Property<Guid>("IncomeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("TotalIncome")
                        .HasColumnType("integer");

                    b.HasKey("IncomeId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Payment", b =>
                {
                    b.Property<Guid>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ClientMoney")
                        .HasColumnType("integer");

                    b.Property<Guid>("CoffeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Deal")
                        .HasColumnType("integer");

                    b.HasKey("PaymentId");

                    b.HasIndex("CoffeeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdUser");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Balance", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Entities.Coffee", "Coffee")
                        .WithMany()
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Payment", b =>
                {
                    b.HasOne("CoffeeMachine.Domain.Entities.Coffee", "Coffee")
                        .WithMany("Payments")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Coffee");
                });

            modelBuilder.Entity("CoffeeMachine.Domain.Entities.Coffee", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
